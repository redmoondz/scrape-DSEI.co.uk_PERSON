#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
"""

import sys
import os
import csv

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å Python
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from src.scraper import DSEISpeakerScraper
from config.settings import SPEAKERS_CSV_FILE


def analyze_results():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    if not os.path.exists(SPEAKERS_CSV_FILE):
        print("‚ùå –§–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –ø–∞—Ä—Å–µ—Ä.")
        return
    
    speakers = []
    with open(SPEAKERS_CSV_FILE, 'r', encoding='utf-8') as csvfile:
        reader = csv.DictReader(csvfile)
        speakers = list(reader)
    
    companies = {}
    countries = {}
    with_social = 0
    with_sessions = 0
    
    for speaker in speakers:
        company = speaker.get('company', '').strip()
        if company:
            companies[company] = companies.get(company, 0) + 1
            
        country = speaker.get('country', '').strip()
        if country:
            countries[country] = countries.get(country, 0) + 1
            
        if speaker.get('social_network', '').strip():
            with_social += 1
            
        if speaker.get('session_date', '').strip():
            with_sessions += 1
    
    print(f"\nüìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
    print(f"=" * 40)
    print(f"–í—Å–µ–≥–æ —Å–ø–∏–∫–µ—Ä–æ–≤: {len(speakers)}")
    print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π: {len(companies)}")
    print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω: {len(countries)}")
    print(f"–°–ø–∏–∫–µ—Ä–æ–≤ —Å —Å–æ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–µ—Ç—è–º–∏: {with_social}")
    print(f"–°–ø–∏–∫–µ—Ä–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–µ—Å—Å–∏—è—Ö: {with_sessions}")
    
    print(f"\nüè¢ –¢–û–ü-5 –ö–û–ú–ü–ê–ù–ò–ô:")
    top_companies = sorted(companies.items(), key=lambda x: x[1], reverse=True)[:5]
    for company, count in top_companies:
        print(f"  ‚Ä¢ {company}: {count} —Å–ø–∏–∫–µ—Ä(–æ–≤)")
    
    print(f"\nüåç –¢–û–ü-5 –°–¢–†–ê–ù:")
    top_countries = sorted(countries.items(), key=lambda x: x[1], reverse=True)[:5]
    for country, count in top_countries:
        print(f"  ‚Ä¢ {country}: {count} —Å–ø–∏–∫–µ—Ä(–æ–≤)")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ —Å–ø–∏–∫–µ—Ä–æ–≤ DSEI...")
    print("=" * 50)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä
        scraper = DSEISpeakerScraper()
        scraper.run()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        analyze_results()
        
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
        
    except Exception as e:
        print(f"\n\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
